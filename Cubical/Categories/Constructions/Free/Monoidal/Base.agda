{- Free monoidal category generated by a type of objects -}
{-# OPTIONS --safe #-}
module Cubical.Categories.Constructions.Free.Monoidal.Base where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Data.Sigma hiding (_×_)
import Cubical.Data.Sigma as Σ

open import Cubical.Categories.Category.Base
open import Cubical.Categories.Monoidal.Base
open import Cubical.Categories.Monoidal.Functor
open import Cubical.Categories.Functor
open import Cubical.Categories.NaturalTransformation
open import Cubical.Categories.Constructions.Free.Category hiding (ε)

private
  variable
    ℓ ℓQ ℓQ' ℓC ℓC' ℓCᴰ ℓCᴰ' ℓD ℓD' ℓDᴰ ℓDᴰ' : Level

open Category
open Functor
open NatTrans
open NatIso
open isIso
module _ (X : Type ℓ) where
  data MonOb : Type ℓ where
    ↑ : X → MonOb
    ε : MonOb
    _⊗_ : MonOb → MonOb → MonOb

  data MonMor : MonOb → MonOb → Type ℓ where
    idₑ : ∀ {x} → MonMor x x
    _⋆ₑ_ : ∀ {x y z} → MonMor x y → MonMor y z → MonMor x z
    ⋆ₑIdL : ∀ {x y} (e : MonMor x y) → idₑ ⋆ₑ e ≡ e
    ⋆ₑIdR : ∀ {x y} (e : MonMor x y) → e ⋆ₑ idₑ ≡ e
    ⋆ₑAssoc : ∀ {x y z D} (e : MonMor x y)(f : MonMor y z)(g : MonMor z D)
              → (e ⋆ₑ f) ⋆ₑ g ≡ e ⋆ₑ (f ⋆ₑ g)
    isSetHomₑ : ∀ {x y} → isSet (MonMor x y)

    _⊗_ : ∀ {x x' y y'} → MonMor x y → MonMor x' y' → MonMor (x ⊗ x') (y ⊗ y')
    ⊗id : ∀ {x y} → idₑ ⊗ idₑ ≡ idₑ {x ⊗ y}
    ⊗⋆  : ∀ {x x' y y' z z'}
      (f : MonMor x y) (g : MonMor y z)
      (f' : MonMor x' y') (g' : MonMor y' z')
      → (f ⋆ₑ g) ⊗ (f' ⋆ₑ g') ≡ ((f ⊗ f') ⋆ₑ (g ⊗ g'))

    α : ∀ {x y z} → MonMor (x ⊗ (y ⊗ z)) ((x ⊗ y) ⊗ z)
    α⁻ : ∀ {x y z} → MonMor ((x ⊗ y) ⊗ z) (x ⊗ (y ⊗ z))
    α-nat : ∀ {x x' y y' z z'} →
      (f : MonMor x x')(g : MonMor y y')(h : MonMor z z')
      → ((f ⊗ (g ⊗ h)) ⋆ₑ α) ≡ (α ⋆ₑ ((f ⊗ g) ⊗ h))
    α⋆α⁻ : ∀ {x y z} → α {x}{y}{z} ⋆ₑ α⁻ ≡ idₑ
    α⁻⋆α : ∀ {x y z} → α⁻ {x}{y}{z} ⋆ₑ α ≡ idₑ
    
    η : ∀ {x} → MonMor (ε ⊗ x) x
    η⁻ : ∀ {x} → MonMor x (ε ⊗ x)
    η-nat : ∀ {x y} (f : MonMor x y) → ((idₑ ⊗ f) ⋆ₑ η) ≡ (η ⋆ₑ f)
    η⋆η⁻ : ∀ {x} → (η {x} ⋆ₑ η⁻) ≡ idₑ
    η⁻⋆η : ∀ {x} → (η⁻ {x} ⋆ₑ η) ≡ idₑ

    ρ : ∀ {x} → MonMor (x ⊗ ε) x
    ρ⁻ : ∀ {x} → MonMor x (x ⊗ ε)
    ρ-nat : ∀ {x y} (f : MonMor x y) → ((f ⊗ idₑ) ⋆ₑ ρ) ≡ (ρ ⋆ₑ f)
    ρ⋆ρ⁻ : ∀ {x} → (ρ {x} ⋆ₑ ρ⁻) ≡ idₑ
    ρ⁻⋆ρ : ∀ {x} → (ρ⁻ {x} ⋆ₑ ρ) ≡ idₑ

    pentagon : ∀ {w x y z} →
      (idₑ {w} ⊗ α {x}{y}{z}) ⋆ₑ (α ⋆ₑ (α ⊗ idₑ)) ≡ (α ⋆ₑ α)
    triangle : ∀ {x y} → α ⋆ₑ (ρ {x} ⊗ idₑ) ≡ (idₑ ⊗ (η {y}))

  |FreeMonoidalCategory| : Category ℓ ℓ
  |FreeMonoidalCategory| .ob = MonOb
  |FreeMonoidalCategory| .Hom[_,_] = MonMor
  |FreeMonoidalCategory| .id = idₑ
  |FreeMonoidalCategory| ._⋆_ = _⋆ₑ_
  |FreeMonoidalCategory| .⋆IdL = ⋆ₑIdL
  |FreeMonoidalCategory| .⋆IdR = ⋆ₑIdR
  |FreeMonoidalCategory| .⋆Assoc = ⋆ₑAssoc
  |FreeMonoidalCategory| .isSetHom = isSetHomₑ

  FreeMonoidalCategoryStr : TensorStr |FreeMonoidalCategory|
  FreeMonoidalCategoryStr .TensorStr.─⊗─ .F-ob (x , y) = x ⊗ y
  FreeMonoidalCategoryStr .TensorStr.─⊗─ .F-hom (f , g) = f ⊗ g
  FreeMonoidalCategoryStr .TensorStr.─⊗─ .F-id = ⊗id
  FreeMonoidalCategoryStr .TensorStr.─⊗─ .F-seq f g = ⊗⋆ (f .fst) (g .fst) (f .snd) (g .snd)
  FreeMonoidalCategoryStr .TensorStr.unit = ε

  FreeMonoidalCategory : MonoidalCategory ℓ ℓ
  FreeMonoidalCategory .MonoidalCategory.C = |FreeMonoidalCategory|
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.tenstr =
    FreeMonoidalCategoryStr
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.α .trans .N-ob x =
    α
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.α .trans .N-hom f =
    α-nat _ _ _
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.α .nIso x .inv = α⁻
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.α .nIso x .sec = α⁻⋆α
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.α .nIso x .ret = α⋆α⁻
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.η .trans .N-ob x = η
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.η .trans .N-hom = η-nat
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.η .nIso x .inv = η⁻
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.η .nIso x .sec = η⁻⋆η
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.η .nIso x .ret = η⋆η⁻
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.ρ .trans .N-ob x = ρ
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.ρ .trans .N-hom = ρ-nat
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.ρ .nIso x .inv = ρ⁻
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.ρ .nIso x .sec = ρ⁻⋆ρ
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.ρ .nIso x .ret = ρ⋆ρ⁻
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.pentagon w x y z = pentagon
  FreeMonoidalCategory .MonoidalCategory.monstr .MonoidalStr.triangle x y = triangle

  module _ (M : MonoidalCategory ℓC ℓC') where
    private
      module M = MonoidalCategory M
    module _ (ı : X → M.C .ob) where
      rec-ob : MonOb → M.C .ob
      rec-ob (↑ x) = ı x
      rec-ob ε = M.unit
      rec-ob (x ⊗ y) = rec-ob x M.⊗ rec-ob y

      rec-mor : ∀ {x y} → MonMor x y → M.C [ rec-ob x , rec-ob y ]
      rec-mor idₑ = M.id
      rec-mor (e ⋆ₑ e₁) = rec-mor e M.⋆ rec-mor e₁
      rec-mor (⋆ₑIdL e i) = M.⋆IdL (rec-mor e) i
      rec-mor (⋆ₑIdR e i) = M.⋆IdR (rec-mor e) i
      rec-mor (⋆ₑAssoc e f g i) = M.⋆Assoc (rec-mor e) (rec-mor f) (rec-mor g) i
      rec-mor (isSetHomₑ e f x y i j) =
        M.isSetHom (rec-mor e) (rec-mor f) (cong rec-mor x) (cong rec-mor y) i j
      rec-mor (e ⊗ f) = rec-mor e M.⊗ₕ rec-mor f
      rec-mor (⊗id i) = M.─⊗─ .F-id i
      rec-mor (⊗⋆ f g f' g' i) =
        M.─⊗─ .F-seq (rec-mor f , rec-mor f') ((rec-mor g) , (rec-mor g')) i
      rec-mor α = M.α⟨ _ , _ , _ ⟩
      rec-mor α⁻ = M.α⁻¹⟨ _ , _ , _ ⟩
      rec-mor (α-nat f g h i) =
        M.α .trans .N-hom ((rec-mor f) , ((rec-mor g) , (rec-mor h))) i
      rec-mor (α⋆α⁻ i) = M.α .nIso _ .ret i
      rec-mor (α⁻⋆α i) = M.α .nIso _ .sec i
      rec-mor η = M.η⟨ _ ⟩
      rec-mor η⁻ = M.η⁻¹⟨ _ ⟩
      rec-mor (η-nat e i) = M.η .trans .N-hom (rec-mor e) i
      rec-mor (η⋆η⁻ i) = M.η .nIso _ .ret i
      rec-mor (η⁻⋆η i) = M.η .nIso _ .sec i
      rec-mor ρ = M.ρ⟨ _ ⟩
      rec-mor ρ⁻ = M.ρ⁻¹⟨ _ ⟩
      rec-mor (ρ-nat e i) = M.ρ .trans .N-hom (rec-mor e) i
      rec-mor (ρ⋆ρ⁻ i) = M.ρ .nIso _ .ret i
      rec-mor (ρ⁻⋆ρ i) = M.ρ .nIso _ .sec i
      rec-mor (pentagon i) = M.pentagon _ _ _ _ i
      rec-mor (triangle i) = M.triangle _ _ i

      rec : Functor |FreeMonoidalCategory| M.C
      rec .F-ob = rec-ob
      rec .F-hom = rec-mor
      rec .F-id = refl
      rec .F-seq _ _ = refl

      open LaxMonoidalFunctor
      open LaxMonoidalStr
      open StrongMonoidalStr
      recLax : LaxMonoidalFunctor FreeMonoidalCategory M
      recLax .LaxMonoidalFunctor.F = rec
      recLax .LaxMonoidalFunctor.laxmonstr .LaxMonoidalStr.ε = M.id
      recLax .LaxMonoidalFunctor.laxmonstr .LaxMonoidalStr.μ .N-ob x = M.id
      recLax .LaxMonoidalFunctor.laxmonstr .LaxMonoidalStr.μ .N-hom f =
        M.⋆IdR _ ∙ sym (M.⋆IdL _)
      recLax .LaxMonoidalFunctor.laxmonstr .LaxMonoidalStr.assoc-law x y z =
        M.⋆IdR _
        ∙ cong₂ M._⋆_ refl (M.─⊗─ .F-id)
        ∙ M.⋆IdR _ ∙ sym (M.⋆IdL _)
        ∙ cong₂ M._⋆_ (sym (M.─⊗─ .F-id)) refl
        ∙ cong₂ M._⋆_ (sym (M.⋆IdR _)) refl
      recLax .LaxMonoidalFunctor.laxmonstr .LaxMonoidalStr.unit-law x =
        cong₂ M._⋆_ (M.⋆IdR _ ∙ M.─⊗─ .F-id) refl
        ∙ M.⋆IdL _

      recStr : StrongMonoidalFunctor FreeMonoidalCategory M
      recStr .StrongMonoidalFunctor.F = rec
      recStr .StrongMonoidalFunctor.strmonstr .StrongMonoidalStr.laxmonstr = recLax .laxmonstr
      recStr .StrongMonoidalFunctor.strmonstr .StrongMonoidalStr.ε-iso = idCatIso .snd
      recStr .StrongMonoidalFunctor.strmonstr .StrongMonoidalStr.μ-iso = λ _ → idCatIso .snd
