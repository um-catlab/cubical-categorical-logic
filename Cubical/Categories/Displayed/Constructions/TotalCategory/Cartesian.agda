{-# OPTIONS --safe #-}
{-# OPTIONS --lossy-unification #-}
module Cubical.Categories.Displayed.Constructions.TotalCategory.Cartesian where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.HLevels
open import Cubical.Data.Sigma
open import Cubical.Foundations.Function

open import Cubical.Categories.Limits.Cartesian.Base
open import Cubical.Categories.Constructions.TotalCategory.Cartesian

import Cubical.Categories.Displayed.Constructions.TotalCategory as TC·¥∞
open import Cubical.Categories.Displayed.Limits.Cartesian
open import Cubical.Categories.Displayed.Presheaf
import Cubical.Categories.Displayed.Reasoning as Hom·¥∞Reasoning

private
  variable
    ‚ÑìC ‚ÑìC' ‚ÑìC·¥∞ ‚ÑìC·¥∞' ‚ÑìC·¥∞·¥∞ ‚ÑìC·¥∞·¥∞' : Level

module _
  {C : CartesianCategory ‚ÑìC ‚ÑìC'}
  (C·¥∞ : CartesianCategory·¥∞ C ‚ÑìC·¥∞ ‚ÑìC·¥∞')
  (C·¥∞·¥∞ : CartesianCategory·¥∞ (‚à´C C·¥∞) ‚ÑìC·¥∞·¥∞ ‚ÑìC·¥∞·¥∞')
  where
  open UniversalElement·¥∞
  private
    module C = CartesianCategoryNotation C
    module C·¥∞ = CartesianCategory·¥∞Notation C·¥∞
    module C·¥∞·¥∞ = CartesianCategory·¥∞Notation C·¥∞·¥∞
    module R = Hom·¥∞Reasoning (C·¥∞ .fst)
    module R·¥∞ = Hom·¥∞Reasoning (C·¥∞·¥∞ .fst)
  module Lemma
    {x c c' : C.ob}
    {h : C.Hom[ x , c C.√óbp c' ]}
    {x·¥∞ : C·¥∞.ob[ x ]}
    {c·¥∞ : C·¥∞.ob[ c ]}
    {c'·¥∞ : C·¥∞.ob[ c' ]}
    {h‚ÇÅ·¥∞ : C·¥∞.Hom[ h C.‚ãÜ C.œÄ‚ÇÅ ][ x·¥∞ , c·¥∞ ]}
    {h‚ÇÇ·¥∞ : C·¥∞.Hom[ h C.‚ãÜ C.œÄ‚ÇÇ ][ x·¥∞ , c'·¥∞ ]}
    {x·¥∞·¥∞ : C·¥∞·¥∞.ob[ x , x·¥∞ ]}
    {c·¥∞·¥∞ : C·¥∞·¥∞.ob[ c , c·¥∞ ]}
    {c'·¥∞·¥∞ : C·¥∞·¥∞.ob[ c' , c'·¥∞ ]}
    (h‚ÇÅ·¥∞·¥∞ : C·¥∞·¥∞.Hom[ h C.‚ãÜ C.œÄ‚ÇÅ , h‚ÇÅ·¥∞ ][ x·¥∞·¥∞ ,  c·¥∞·¥∞ ])
    (h‚ÇÇ·¥∞·¥∞ : C·¥∞·¥∞.Hom[ h C.‚ãÜ C.œÄ‚ÇÇ , h‚ÇÇ·¥∞ ][ x·¥∞·¥∞ ,  c'·¥∞·¥∞ ])
    where
    h·¥∞ : C·¥∞.Hom[ h ][ x·¥∞ , c·¥∞ C·¥∞.√ó·¥∞ c'·¥∞ ]
    h·¥∞ = h‚ÇÅ·¥∞ C·¥∞.,p·¥∞' h‚ÇÇ·¥∞
    private
      h‚ÇÅ,h‚ÇÇ·¥∞·¥∞ : C·¥∞·¥∞.Hom[ _ , h‚ÇÅ·¥∞ C·¥∞.,p·¥∞ h‚ÇÇ·¥∞ ][ x·¥∞·¥∞ , c·¥∞·¥∞ C·¥∞·¥∞.√ó·¥∞ c'·¥∞·¥∞ ]
      h‚ÇÅ,h‚ÇÇ·¥∞·¥∞ = h‚ÇÅ·¥∞·¥∞ C·¥∞·¥∞.,p·¥∞ h‚ÇÇ·¥∞·¥∞
      --Œ£C·¥∞Hom-Œ∑ : Type (‚Ñì-max ‚ÑìC' ‚ÑìC·¥∞')
      --Œ£C·¥∞Hom-Œ∑ = Œ£ C.Hom[ x , c C.√óbp c' ] (Œª h ‚Üí C·¥∞.Hom[ (h C.‚ãÜ C.œÄ‚ÇÅ) C.,p (h C.‚ãÜ C.œÄ‚ÇÇ) ][ x·¥∞ , c·¥∞ C·¥∞.√ó·¥∞ c'·¥∞ ])
      -- these don't type check without explicit type annotations
      Œ£h·¥∞ Œ£h‚ÇÅ,h‚ÇÇ·¥∞ : Œ£ _ (Œª h ‚Üí C·¥∞.Hom[ h ][ x·¥∞ , c·¥∞ C·¥∞.√ó·¥∞ c'·¥∞ ])
      Œ£h·¥∞ = h , h·¥∞
      Œ£h‚ÇÅ,h‚ÇÇ·¥∞ = ((h C.‚ãÜ C.œÄ‚ÇÅ) C.,p (h C.‚ãÜ C.œÄ‚ÇÇ)) , (h‚ÇÅ·¥∞ C·¥∞.,p·¥∞ h‚ÇÇ·¥∞)
    -- try to reduce  performance issue in
    -- Displayed.Constructions.TotalCategory.Cartesian
    opaque
      private
        p : Œ£h·¥∞ ‚â° Œ£h‚ÇÅ,h‚ÇÇ·¥∞
        p = Œ£PathP (C.√óŒ∑ ,
                  congP‚ÇÇ (Œª _ ‚Üí C·¥∞._,p·¥∞'_ )
                      (R.rectify (R.‚â°out (R.reind-filler _  _)))
                      (R.rectify (R.‚â°out (R.reind-filler _  _))))

      h·¥∞·¥∞ : C·¥∞·¥∞.Hom[ h , h·¥∞ ][ x·¥∞·¥∞ , c·¥∞·¥∞ C·¥∞·¥∞.√ó·¥∞ c'·¥∞·¥∞ ]
      h·¥∞·¥∞ = R·¥∞.reind (sym p) h‚ÇÅ,h‚ÇÇ·¥∞·¥∞
      -- rectify to be over an arbitrary path that isn't 700 lines long
      -- so we can make these lemmas opaque
      Œ≤‚ÇÅ : h·¥∞·¥∞ C·¥∞·¥∞.‚ãÜ·¥∞ C·¥∞·¥∞.œÄ‚ÇÅ·¥∞ C·¥∞·¥∞.‚â°[ Œ£PathP (refl , C·¥∞.√óŒ≤‚ÇÅ·¥∞') ] h‚ÇÅ·¥∞·¥∞
      Œ≤‚ÇÅ = R·¥∞.rectify (R·¥∞.‚â°out
          (R·¥∞.‚ü® sym (R·¥∞.reind-filler _ _) ‚ü©‚ãÜ‚ü® refl ‚ü© ‚àô
          R·¥∞.‚â°in (C·¥∞·¥∞.√óŒ≤‚ÇÅ·¥∞ {f‚ÇÅ·¥∞ = h‚ÇÅ·¥∞·¥∞} {f‚ÇÇ·¥∞ = h‚ÇÇ·¥∞·¥∞})))
      Œ≤‚ÇÇ : h·¥∞·¥∞ C·¥∞·¥∞.‚ãÜ·¥∞ C·¥∞·¥∞.œÄ‚ÇÇ·¥∞ C·¥∞·¥∞.‚â°[ Œ£PathP (refl , C·¥∞.√óŒ≤‚ÇÇ·¥∞') ] h‚ÇÇ·¥∞·¥∞
      Œ≤‚ÇÇ = R·¥∞.rectify (R·¥∞.‚â°out
          (R·¥∞.‚ü® sym (R·¥∞.reind-filler _ _) ‚ü©‚ãÜ‚ü® refl ‚ü© ‚àô
          R·¥∞.‚â°in (C·¥∞·¥∞.√óŒ≤‚ÇÇ·¥∞ {f‚ÇÅ·¥∞ = h‚ÇÅ·¥∞·¥∞} {f‚ÇÇ·¥∞ = h‚ÇÇ·¥∞·¥∞})))
      Œ∑' : ‚àÄ {h·¥∞'}
        ‚Üí {p·¥∞ : h‚ÇÅ·¥∞ ‚â° h·¥∞' C·¥∞.‚ãÜ·¥∞ C·¥∞.œÄ‚ÇÅ·¥∞}
        ‚Üí {q·¥∞ : h‚ÇÇ·¥∞ ‚â° h·¥∞' C·¥∞.‚ãÜ·¥∞ C·¥∞.œÄ‚ÇÇ·¥∞}
        ‚Üí {h·¥∞'·¥∞ : C·¥∞·¥∞.Hom[ h , h·¥∞' ][ x·¥∞·¥∞ , c·¥∞·¥∞ C·¥∞·¥∞.√ó·¥∞ c'·¥∞·¥∞ ]}
        ‚Üí (h‚ÇÅ·¥∞·¥∞ C·¥∞·¥∞.‚â°[ Œ£PathP (refl , p·¥∞) ] h·¥∞'·¥∞ C·¥∞·¥∞.‚ãÜ·¥∞ C·¥∞·¥∞.œÄ‚ÇÅ·¥∞)
        ‚Üí (h‚ÇÇ·¥∞·¥∞ C·¥∞·¥∞.‚â°[ Œ£PathP (refl , q·¥∞) ] h·¥∞'·¥∞ C·¥∞·¥∞.‚ãÜ·¥∞ C·¥∞·¥∞.œÄ‚ÇÇ·¥∞)
        ‚Üí h·¥∞·¥∞ C·¥∞·¥∞.‚â°[ Œ£PathP (refl , C·¥∞.√óŒ∑''·¥∞' (sym p·¥∞) (sym q·¥∞)) ] h·¥∞'·¥∞
      Œ∑' p·¥∞·¥∞ q·¥∞·¥∞ = R·¥∞.rectify (R·¥∞.‚â°out (sym (R·¥∞.reind-filler _ _) ‚àô R·¥∞.‚â°in (C·¥∞·¥∞.√óŒ∑''·¥∞ p·¥∞·¥∞ q·¥∞·¥∞)))
  ‚à´C·¥∞ : CartesianCategory·¥∞ C (‚Ñì-max ‚ÑìC·¥∞ ‚ÑìC·¥∞·¥∞) (‚Ñì-max ‚ÑìC·¥∞' ‚ÑìC·¥∞·¥∞')
  ‚à´C·¥∞ .fst = TC·¥∞.‚à´C·¥∞ (C·¥∞ .fst) (C·¥∞·¥∞ .fst)
  ‚à´C·¥∞ .snd .fst .vertex·¥∞ = _ , C·¥∞·¥∞.ùüô·¥∞
  ‚à´C·¥∞ .snd .fst .element·¥∞ = _
  ‚à´C·¥∞ .snd .fst .universal·¥∞ .equiv-proof _ = uniqueExists
    (C·¥∞.!t·¥∞' , C·¥∞·¥∞.!t·¥∞')
    refl
    (Œª _ _ _ ‚Üí refl)
    Œª _ _ ‚Üí Œ£PathP (C·¥∞.ùüôŒ∑'·¥∞ _ _ , C·¥∞·¥∞.ùüôŒ∑'·¥∞ _ _)
  ‚à´C·¥∞ .snd .snd (c·¥∞·¥∞ , c'·¥∞·¥∞) .vertex·¥∞ = _ , (c·¥∞·¥∞ .snd C·¥∞·¥∞.√ó·¥∞ c'·¥∞·¥∞ .snd)
  ‚à´C·¥∞ .snd .snd (c·¥∞·¥∞ , c'·¥∞·¥∞) .element·¥∞ = (_ , C·¥∞·¥∞.œÄ‚ÇÅ·¥∞) , (_ , C·¥∞·¥∞.œÄ‚ÇÇ·¥∞)
  ‚à´C·¥∞ .snd .snd (c·¥∞·¥∞ , c'·¥∞·¥∞) .universal·¥∞ .equiv-proof (h‚ÇÅ·¥∞·¥∞ , h‚ÇÇ·¥∞·¥∞) = uniqueExists
    (Lem.h·¥∞ , Lem.h·¥∞·¥∞)
    (‚â°-√ó
      (Œ£PathP (_ , Lem.Œ≤‚ÇÅ))
      (Œ£PathP (_ , Lem.Œ≤‚ÇÇ)))
    (Œª _ ‚Üí isSet√ó (isSetŒ£ C·¥∞.isSetHom·¥∞ (Œª _ ‚Üí C·¥∞·¥∞.isSetHom·¥∞)) (isSetŒ£ C·¥∞.isSetHom·¥∞ (Œª _ ‚Üí C·¥∞·¥∞.isSetHom·¥∞)) _ _)
    Œª _ p ‚Üí Œ£PathP (C·¥∞.√óŒ∑''·¥∞' (cong (fst ‚àòS fst) p) (cong (fst ‚àòS snd) p) ,
      Lem.Œ∑' (symP (cong (snd ‚àò fst) p)) (symP (cong (snd ‚àò snd) p)))
    where
    module Lem = Lemma (h‚ÇÅ·¥∞·¥∞ .snd) (h‚ÇÇ·¥∞·¥∞ .snd)
