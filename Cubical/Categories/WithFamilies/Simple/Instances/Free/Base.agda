-- Free Simple Category with families generated by base types and function symbols
module Cubical.Categories.WithFamilies.Simple.Instances.Free.Base where

open import Cubical.Foundations.Function
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure

open import Cubical.Data.List
open import Cubical.Data.List.Dependent

open import Cubical.Categories.Category.Base
open import Cubical.Categories.Functor
open import Cubical.Categories.Presheaf

private
  variable
    ℓ ℓ' : Level

open Category
open Functor

module _ (Σ₀ : hSet ℓ) where
  private
    variable
      Δ Γ Θ Ξ : List ⟨ Σ₀ ⟩
      A B C : ⟨ Σ₀ ⟩
  data Var : (Γ : List ⟨ Σ₀ ⟩) → ⟨ Σ₀ ⟩ → Type ℓ where
    vz : ∀ {Γ A} → Var (A ∷ Γ) A
    vs : ∀ {Γ A B} → Var Γ A → Var (B ∷ Γ) A

  isSetVar : isSet (Var Γ A)
  isSetVar = {!!}

  Thinning : (Δ : List ⟨ Σ₀ ⟩) (Γ : List ⟨ Σ₀ ⟩) → Type ℓ
  Thinning Δ = ListP (Var Δ)

  private
    variable
      γ δ θ : Thinning Δ Γ

  -- Thinnings act on variables
  thin : Thinning Δ Γ → Var Γ A → Var Δ A
  thin (y ∷ γ) vz = y
  thin (y ∷ γ) (vs x) = thin γ x

  wkThin : Thinning Δ Γ → Thinning (A ∷ Δ) Γ
  wkThin [] = []
  wkThin (x ∷ θ) = (vs x) ∷ (wkThin θ)

  idThin : ∀ Γ → Thinning Γ Γ
  idThin [] = []
  idThin (x ∷ Γ) = vz ∷ wkThin (idThin Γ)

  _⋆Thin_ : Thinning Θ Δ → Thinning Δ Γ → Thinning Θ Γ
  δ ⋆Thin [] = []
  δ ⋆Thin (x ∷ γ) = thin δ x ∷ (δ ⋆Thin γ)

  thinWkThin : ∀ (γ : Thinning Δ Γ)(x : Var Γ A)
    → thin (wkThin {A = B} γ) x ≡ vs (thin γ x)
  thinWkThin (y ∷ γ) vz = refl
  thinWkThin (y ∷ γ) (vs x) = thinWkThin γ x

  thinId : ∀ {A} Γ (x : Var Γ A) → thin (idThin Γ) x ≡ x
  thinId (B ∷ Γ) vz = refl
  thinId (B ∷ Γ) (vs x) =
    thinWkThin (idThin Γ) x
    ∙ cong vs (thinId Γ x)

  thin⋆ : ∀ {Θ Δ Γ A}{δ : Thinning Θ Δ}(γ : Thinning Δ Γ)(x : Var Γ A)
    → thin (δ ⋆Thin γ) x ≡ thin δ (thin γ x)
  thin⋆ (y ∷ γ) vz = refl
  thin⋆ (y ∷ γ) (vs x) = thin⋆ γ x

  ⋆Thin⋆IdL : ∀ (γ : Thinning Δ Γ) → (idThin Δ ⋆Thin γ) ≡ γ
  ⋆Thin⋆IdL [] = refl
  ⋆Thin⋆IdL (x ∷ γ) i = thinId _ x i ∷ ⋆Thin⋆IdL γ i

  ⋆ThinWk :
    ∀ (γ : Thinning Δ Γ) (δ : Thinning Θ Δ) (x : Var Θ A) →
    (x ∷ δ) ⋆Thin wkThin γ ≡ (δ ⋆Thin γ)
  ⋆ThinWk [] δ x = refl
  ⋆ThinWk (y ∷ γ) δ x i = thin δ y ∷ ⋆ThinWk γ δ x i

  ⋆Thin⋆IdR : ∀ Γ (γ : Thinning Δ Γ) → (γ ⋆Thin idThin Γ) ≡ γ
  ⋆Thin⋆IdR [] [] = refl
  ⋆Thin⋆IdR (A ∷ Γ) (x ∷ γ) i = x ∷ (⋆ThinWk (idThin _) γ x ∙ ⋆Thin⋆IdR Γ γ) i

  ⋆Thin⋆Assoc :
    ∀ (θ : Thinning Ξ Θ)
    → (δ : Thinning Θ Δ)
    → (γ : Thinning Δ Γ)
    → ((θ ⋆Thin δ) ⋆Thin γ) ≡ θ ⋆Thin (δ ⋆Thin γ)
  ⋆Thin⋆Assoc _ _ [] = refl
  ⋆Thin⋆Assoc θ δ (x ∷ γ) i = thin⋆ {δ = θ} δ x i ∷ ⋆Thin⋆Assoc θ δ γ i

  ThinningCategory : Category ℓ ℓ
  ThinningCategory .ob = List ⟨ Σ₀ ⟩
  ThinningCategory .Hom[_,_] = Thinning
  ThinningCategory .id = idThin _
  ThinningCategory ._⋆_ = _⋆Thin_
  ThinningCategory .⋆IdL = ⋆Thin⋆IdL
  ThinningCategory .⋆IdR = ⋆Thin⋆IdR _
  ThinningCategory .⋆Assoc = ⋆Thin⋆Assoc
  ThinningCategory .isSetHom = isOfHLevelSucSuc-ListP 0 λ _ → isSetVar

  ThinPsh : ∀ (A : ⟨ Σ₀ ⟩) → Presheaf ThinningCategory ℓ
  ThinPsh A .F-ob Γ .fst = Var Γ A
  ThinPsh A .F-ob Γ .snd = isSetVar
  ThinPsh A .F-hom = thin
  ThinPsh A .F-id = funExt (thinId _)
  ThinPsh A .F-seq γ δ = funExt (thin⋆ γ)

  -- data Exp (Γ : List ⟨ Σ₀ ⟩) : ⟨ Σ₀ ⟩ → Type (ℓ-max ℓ ℓ')
  -- Subst : (Δ : List ⟨ Σ₀ ⟩) (Γ : List ⟨ Σ₀ ⟩) → Type (ℓ-max ℓ ℓ')
  -- Subst Δ Γ = ListP (Exp Δ) Γ

  -- data Exp Γ where
  --   var : ∀ {A} → Var Γ A → Exp Γ A
  --   _〈_〉 : ∀ (f : ⟨ Σ₁ ⟩) → (Subst Γ (dom f)) → Exp Γ (cod f)

  -- idSubst : ∀ Γ → Subst Γ Γ
  -- idSubst [] = []
  -- idSubst (A ∷ Γ) = (var vz) ∷ {!!}

  -- SubstCat : Category ℓ (ℓ-max ℓ ℓ')
  -- SubstCat .ob = List ⟨ Σ₀ ⟩
  -- SubstCat .Hom[_,_] = Subst
  -- SubstCat .id = {!!}
  -- SubstCat ._⋆_ = {!!}
  -- SubstCat .⋆IdL = {!!}
  -- SubstCat .⋆IdR = {!!}
  -- SubstCat .⋆Assoc = {!!}
  -- SubstCat .isSetHom = {!!}

  -- Tm : ⟨ Σ₀ ⟩ → Presheaf SubstCat {!!}
  -- Tm A .F-ob Γ .fst = Exp Γ A
  -- Tm A .F-ob Γ .snd = {!!}
  -- Tm A .F-hom = {!!}
  -- Tm A .F-id = {!!}
  -- Tm A .F-seq = {!!}
