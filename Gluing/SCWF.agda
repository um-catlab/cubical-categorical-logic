{-# OPTIONS -WnoUnsupportedIndexedMatch #-}
{-# OPTIONS --lossy-unification #-}
module Gluing.SCWF where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.HLevels

open import Cubical.Data.Unit
open import Cubical.Data.Nat
open import Cubical.Data.Fin
open import Cubical.Data.List hiding ([_])
open import Cubical.Data.List.Dependent

open import Cubical.Categories.Category
open import Cubical.Categories.Instances.Sets
open import Cubical.Categories.Functor
open import Cubical.Categories.Presheaf.Morphism.Alt
open import Cubical.Categories.WithFamilies.Simple
open import Cubical.Categories.WithFamilies.Simple.Functor
open import Cubical.Categories.WithFamilies.Simple.Instances.Free.Base
  renaming (elim to elimSCwF)
open import Cubical.Categories.WithFamilies.Simple.Instances.Sets
  renaming (SET to SCwFSET)
open import Cubical.Categories.WithFamilies.Simple.Instances.Reindex
  renaming (reindex to reindexSCwF‚±Ω)
open import Cubical.Categories.WithFamilies.Simple.Instances.VerticalToDisplayed
open import Cubical.Categories.WithFamilies.Simple.Displayed
open import Cubical.Categories.Limits.Terminal.More
open import Cubical.Categories.Limits.BinProduct.More

open import Cubical.Categories.Displayed.Section.Base
open import Cubical.Categories.Displayed.Base
open import Cubical.Categories.Displayed.Instances.Sets

gen : hGroupoid ‚Ñì-zero
gen = Unit , Œª _ _ _ _ _ _ ‚Üí refl

free-scwf-on-one-gen : SCwF _ _ _ _
free-scwf-on-one-gen = FreeSCwF gen

open SCwFNotation free-scwf-on-one-gen
open TerminalNotation term
open Category C
open PshHom
open Section
open Functor

CanonicalForm : ‚àÄ {c : ob} ‚Üí C [ ùüô , c ] ‚Üí Type _
CanonicalForm e = ‚Ñï

isSetCanonicalForm : ‚àÄ {c} {e : C [ ùüô , c ]} ‚Üí isSet (CanonicalForm e)
isSetCanonicalForm = isSet‚Ñï

SCwF·¥∞SET : SCwF·¥∞ (SCwFSET ‚Ñì-zero) _ _ _ _
SCwF·¥∞SET = SCwF‚±Ω‚ÜíSCwF·¥∞ {C = SCwFSET _} {C·¥∞ = SET‚±Ω _ ‚Ñì-zero}

-- The position of a variable in context
idx : ‚àÄ {Œì A} ‚Üí Var gen Œì A ‚Üí Fin (length Œì)
idx vz = fzero
idx (vs v) = fsuc (idx v)

lengthP : ‚àÄ {‚ÑìA ‚ÑìB} {A : Type ‚ÑìA} {B : A ‚Üí Type ‚ÑìB} {as : List A}
  ‚Üí ListP B as ‚Üí ‚Ñï
lengthP [] = 0
lengthP (b ‚à∑ bs) = suc (lengthP bs)

lengthP-‚â° : ‚àÄ {‚ÑìA ‚ÑìB} {A : Type ‚ÑìA} {B : A ‚Üí Type ‚ÑìB} {as : List A}
  ‚Üí (bs : ListP B as) ‚Üí lengthP bs ‚â° length as
lengthP-‚â° {as = []} [] = refl
lengthP-‚â° {as = a ‚à∑ as} (b ‚à∑ bs) = cong suc (lengthP-‚â° bs)

-- TODO need finset op

-- F : PreFunctor free-scwf-on-one-gen (SCwFSET _)
-- F .fst .F-ob Œì = Fin (length Œì) , isSetFin
-- F .fst .F-hom Œ≥ v = {!!}
-- F .fst .F-id = {!!}
-- F .fst .F-seq = {!!}
-- F .snd = {!!}

-- reindexSCwF‚±ΩSET : SCwF‚±Ω free-scwf-on-one-gen _ _ _ _
-- reindexSCwF‚±ΩSET =
--   reindexSCwF‚±Ω {C = free-scwf-on-one-gen} {D = SCwFSET ‚Ñì-zero}
--     F (SET‚±Ω _ ‚Ñì-zero)

-- -- -- TODO elimLocal for SCwF·¥∞
-- -- canonicalize :
-- --   StrictSection
-- --     free-scwf-on-one-gen
-- --     (SCwF‚±Ω‚ÜíSCwF·¥∞ {C·¥∞ = reindexSCwF‚±ΩSET})
-- -- canonicalize =
-- --   elimSCwF gen
-- --     (SCwF‚±Ω‚ÜíSCwF·¥∞ {C·¥∞ = reindexSCwF‚±ΩSET})
-- --     Œª _ _ ‚Üí Unit , isSetUnit

-- -- canonicity : ‚àÄ {c} ‚Üí (e : C [ ùüô , c ]) ‚Üí CanonicalForm e
-- -- canonicity e = {!canonicalize .fst .F-hom·¥∞ e !}
